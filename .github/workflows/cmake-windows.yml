name: CMake Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: actions/checkout@v3
    - uses: msys2/setup-msys2@v3
      with:
        msystem: MINGW64
        update: true
        install: >-
          cmake
          ninja
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-vala       
          mingw-w64-x86_64-libgee
          mingw-w64-x86_64-poppler
          mingw-w64-x86_64-libgtk-3
          mingw-w64-x86_64-libgstreamer1.0
          mingw-w64-x86_64-libgstreamer-plugins-base1.0
          mingw-w64-x86_64-libjson-glib
          mingw-w64-x86_64-libsoup
          mingw-w64-x86_64-libqrencode

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
